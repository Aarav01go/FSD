import React, { useEffect, useState, useRef } from "react";

// App.jsx

/*
   Cool React Form
   - Single-file component with embedded styles
   - Features: animated header, floating labels, avatar preview, skill tags,
      live validation, range preview, color picker, and form summary modal
*/

export default function App() {
   // Inject styles once
   useEffect(() => {
      const styleId = "cool-form-styles";
      if (document.getElementById(styleId)) return;
      const style = document.createElement("style");
      style.id = styleId;
      style.textContent = `
         :root{
            --bg:#0f1724;
            --card: rgba(255,255,255,0.06);
            --accent1: #7c3aed;
            --accent2: #06b6d4;
            --glass: rgba(255,255,255,0.04);
            --muted: rgba(255,255,255,0.6);
            --danger: #fb7185;
         }
         *{box-sizing:border-box}
         html,body,#root{height:100%}
         body{
            margin:0;
            font-family: Inter, ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
            background: radial-gradient(800px 400px at 10% 10%, rgba(124,58,237,0.12), transparent),
                              radial-gradient(700px 300px at 90% 90%, rgba(6,182,212,0.06), transparent),
                              var(--bg);
            color:#e6eef8;
            -webkit-font-smoothing:antialiased;
            -moz-osx-font-smoothing:grayscale;
            padding:40px;
            display:flex;
            align-items:center;
            justify-content:center;
         }
         .container{
            width:100%;
            max-width:980px;
            display:grid;
            grid-template-columns: 1fr 420px;
            gap:28px;
            align-items:start;
         }
         .hero{
            padding:28px;
            border-radius:14px;
            background: linear-gradient(180deg, rgba(255,255,255,0.02), transparent);
            border:1px solid rgba(255,255,255,0.03);
            backdrop-filter: blur(6px);
         }
         .title{
            display:flex;
            gap:12px;
            align-items:center;
         }
         .logo{
            width:56px;height:56px;border-radius:12px;
            background:linear-gradient(135deg,var(--accent1),var(--accent2));
            display:flex;align-items:center;justify-content:center;
            font-weight:700;font-size:18px;box-shadow:0 6px 30px rgba(7,12,23,0.6);
         }
         h1{margin:6px 0 8px;font-size:20px}
         p.lead{margin:0;color:var(--muted);font-size:14px}
         form{margin-top:18px;display:grid;gap:14px}
         .row{display:flex;gap:12px}
         .card{
            background:var(--card);
            padding:16px;border-radius:12px;border:1px solid rgba(255,255,255,0.03);
         }
         .field{
            position:relative;
         }
         input[type="text"], input[type="email"], input[type="password"], textarea, select {
            width:100%;
            padding:14px 12px 10px 12px;
            background:transparent;
            border:1px solid rgba(255,255,255,0.04);
            color:inherit;border-radius:8px;
            outline:none;font-size:14px;
         }
         textarea{min-height:96px;resize:vertical;padding-top:18px}
         label.floating{
            position:absolute;left:12px;top:10px;
            transform-origin:left top;
            transition: all .14s ease;
            color:var(--muted);font-size:13px;
            pointer-events:none;
         }
         input:focus + label.floating,
         textarea:focus + label.floating,
         select:focus + label.floating,
         .filled + label.floating{
            transform: translateY(-8px) scale(.86);
            color: #fff;
         }
         .small{font-size:12px;color:var(--muted)}
         .skills{display:flex;gap:8px;flex-wrap:wrap}
         .chip{
            padding:6px 10px;border-radius:999px;background:rgba(255,255,255,0.04);
            border:1px solid rgba(255,255,255,0.02);cursor:pointer;color:var(--muted);
         }
         .chip.active{background:linear-gradient(90deg,var(--accent1),var(--accent2)); color:white; box-shadow:0 6px 18px rgba(124,58,237,0.12)}
         .avatar-preview{width:100%;height:180px;border-radius:10px;background:linear-gradient(180deg, rgba(255,255,255,0.02), transparent);display:flex;align-items:center;justify-content:center;overflow:hidden;border:1px dashed rgba(255,255,255,0.03)}
         .avatar-preview img{max-width:100%;max-height:100%;object-fit:cover}
         .submit-row{display:flex;gap:10px;align-items:center;justify-content:space-between}
         .btn{
            padding:10px 14px;border-radius:10px;border:0;font-weight:600;cursor:pointer;background:linear-gradient(90deg,var(--accent1),var(--accent2));color:white;
            box-shadow: 0 8px 30px rgba(12,18,32,0.6);
         }
         .btn.ghost{background:transparent;border:1px solid rgba(255,255,255,0.06);color:var(--muted)}
         .range-wrap{display:flex;align-items:center;gap:12px}
         .color-swatch{width:28px;height:28px;border-radius:8px;border:1px solid rgba(255,255,255,0.06)}
         .footer-note{font-size:12px;color:var(--muted)}
         .error{color:var(--danger);font-size:12px;margin-top:6px}
         .summary{
            padding:18px;border-radius:12px;background:linear-gradient(180deg, rgba(255,255,255,0.02), transparent);
            border:1px solid rgba(255,255,255,0.03)
         }
         .badge{display:inline-block;padding:6px 8px;border-radius:8px;background:rgba(255,255,255,0.02);font-size:13px}
         .modal{
            position:fixed;inset:0;display:flex;align-items:center;justify-content:center;
            background:rgba(2,6,23,0.6);backdrop-filter:blur(2px);
         }
         .dialog{width:480px;max-width:92%;background:linear-gradient(180deg, #071024, #0b1220);padding:18px;border-radius:12px;border:1px solid rgba(255,255,255,0.04)}
      `;
      document.head.appendChild(style);
   }, []);

   // Form state
   const [values, setValues] = useState({
      name: "",
      email: "",
      password: "",
      role: "student",
      bio: "",
      color: "#7c3aed",
      experience: 3,
      avatar: null,
      terms: false,
   });
   const [skills, setSkills] = useState(["React", "Node", "CSS"]);
   const allSkillOptions = ["React", "Vue", "Angular", "Node", "TypeScript", "CSS", "GraphQL"];
   const [preview, setPreview] = useState(null);
   const [errors, setErrors] = useState({});
   const [submitting, setSubmitting] = useState(false);
   const [summaryOpen, setSummaryOpen] = useState(false);

   // Refs for floating label detection
   const inputsRef = useRef({});

   useEffect(() => {
      // handle objectURL cleanup for preview
      return () => {
         if (preview && preview.startsWith("blob:")) URL.revokeObjectURL(preview);
      };
   }, [preview]);

   function handleChange(e) {
      const { name, value, type, checked } = e.target;
      setValues(prev => ({ ...prev, [name]: type === "checkbox" ? checked : value }));
      setErrors(prev => ({ ...prev, [name]: "" }));
   }

   function handleAvatar(e) {
      const file = e.target.files && e.target.files[0];
      if (!file) return;
      if (!file.type.startsWith("image/")) {
         setErrors(prev => ({ ...prev, avatar: "Please select an image." }));
         return;
      }
      if (preview && preview.startsWith("blob:")) URL.revokeObjectURL(preview);
      const url = URL.createObjectURL(file);
      setPreview(url);
      setValues(prev => ({ ...prev, avatar: file }));
      setErrors(prev => ({ ...prev, avatar: "" }));
   }

   function toggleSkill(skill) {
      setSkills(prev => (prev.includes(skill) ? prev.filter(s => s !== skill) : [...prev, skill]));
   }

   function validate() {
      const e = {};
      if (!values.name.trim()) e.name = "Name is required";
      if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(values.email)) e.email = "Enter a valid email";
      if (values.password.length < 6) e.password = "Password must be 6+ characters";
      if (!values.terms) e.terms = "You must accept the terms";
      return e;
   }

   async function handleSubmit(ev) {
      ev.preventDefault();
      const e = validate();
      setErrors(e);
      if (Object.keys(e).length) return;
      setSubmitting(true);
      // Fake async submit
      await new Promise(r => setTimeout(r, 850));
      setSubmitting(false);
      setSummaryOpen(true);
   }

   function handleReset() {
      setValues({
         name: "",
         email: "",
         password: "",
         role: "student",
         bio: "",
         color: "#7c3aed",
         experience: 3,
         avatar: null,
         terms: false,
      });
      setSkills(["React", "Node", "CSS"]);
      if (preview && preview.startsWith("blob:")) URL.revokeObjectURL(preview);
      setPreview(null);
      setErrors({});
   }

   // utility to mark filled inputs for floating labels
   function isFilled(name) {
      return !!(inputsRef.current[name]?.value || values[name]);
   }

   return (
      <div className="container">
         <div className="hero card">
            <div className="title">
               <div className="logo">CF</div>
               <div>
                  <h1>CoolForm â€” Create your profile</h1>
                  <p className="lead">A modern, responsive form with live preview and validation.</p>
               </div>
            </div>

            <form onSubmit={handleSubmit} noValidate>
               <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: 12 }}>
                  <div className="field">
                     <input
                        name="name"
                        ref={el => (inputsRef.current["name"] = el)}
                        className={isFilled("name") ? "filled" : ""}
                        value={values.name}
                        onChange={handleChange}
                        type="text"
                        autoComplete="name"
                     />
                     <label className="floating">Full name</label>
                     {errors.name && <div className="error">{errors.name}</div>}
                  </div>

                  <div className="field">
                     <input
                        name="email"
                        ref={el => (inputsRef.current["email"] = el)}
                        className={isFilled("email") ? "filled" : ""}
                        value={values.email}
                        onChange={handleChange}
                        type="email"
                        autoComplete="email"
                     />
                     <label className="floating">Email</label>
                     {errors.email && <div className="error">{errors.email}</div>}
                  </div>
               </div>

               <div className="row">
                  <div style={{ flex: 1 }} className="field">
                     <input
                        name="password"
                        ref={el => (inputsRef.current["password"] = el)}
                        className={isFilled("password") ? "filled" : ""}
                        value={values.password}
                        onChange={handleChange}
                        type="password"
                        autoComplete="new-password"
                     />
                     <label className="floating">Password</label>
                     {errors.password && <div className="error">{errors.password}</div>}
                  </div>

                  <div style={{ width: 160 }} className="field">
                     <select
                        name="role"
                        value={values.role}
                        onChange={handleChange}
                        ref={el => (inputsRef.current["role"] = el)}
                        className={isFilled("role") ? "filled" : ""}
                     >
                        <option value="student">Student</option>
                        <option value="developer">Developer</option>
                        <option value="designer">Designer</option>
                        <option value="manager">Manager</option>
                     </select>
                     <label className="floating">Role</label>
                  </div>
               </div>

               <div className="card">
                  <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: 8 }}>
                     <div style={{ fontWeight: 700 }}>Skills</div>
                     <div className="small">Click to toggle</div>
                  </div>
                  <div className="skills" style={{ marginBottom: 8 }}>
                     {allSkillOptions.map(s => (
                        <div
                           key={s}
                           className={"chip " + (skills.includes(s) ? "active" : "")}
                           onClick={() => toggleSkill(s)}
                        >
                           {s}
                        </div>
                     ))}
                  </div>
                  <div className="small">Selected: {skills.join(", ") || "â€”"}</div>
               </div>

               <div className="row">
                  <div style={{ flex: 1 }}>
                     <div className="field">
                        <textarea
                           name="bio"
                           ref={el => (inputsRef.current["bio"] = el)}
                           className={isFilled("bio") ? "filled" : ""}
                           value={values.bio}
                           onChange={handleChange}
                        />
                        <label className="floating">Short bio</label>
                        <div className="small" style={{ marginTop: 6 }}>{values.bio.length}/300</div>
                     </div>
                  </div>

                  <div style={{ width: 220 }}>
                     <div className="card">
                        <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: 10 }}>
                           <div style={{ fontWeight: 700 }}>Avatar</div>
                           <div className="small">PNG/JPG</div>
                        </div>
                        <div className="avatar-preview" title="Avatar preview">
                           {preview ? <img src={preview} alt="avatar preview" /> : <div className="small" style={{ color: "var(--muted)" }}>No image selected</div>}
                        </div>
                        <div style={{ marginTop: 10, display: "flex", gap: 8 }}>
                           <label className="btn ghost" style={{ padding: 8 }}>
                              Upload
                              <input type="file" accept="image/*" onChange={handleAvatar} style={{ display: "none" }} />
                           </label>
                           <button type="button" className="btn ghost" onClick={() => { setPreview(null); setValues(v => ({ ...v, avatar: null })); }}>
                              Remove
                           </button>
                        </div>
                        {errors.avatar && <div className="error">{errors.avatar}</div>}
                     </div>
                  </div>
               </div>

               <div className="row">
                  <div style={{ flex: 1 }} className="card">
                     <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
                        <div>
                           <div className="small">Experience</div>
                           <div style={{ fontWeight: 700 }}>{values.experience} years</div>
                        </div>
                        <div style={{ width: 160 }}>
                           <div className="range-wrap">
                              <input
                                 type="range"
                                 min="0"
                                 max="20"
                                 name="experience"
                                 value={values.experience}
                                 onChange={handleChange}
                              />
                           </div>
                        </div>
                     </div>
                  </div>

                  <div style={{ width: 220 }} className="card">
                     <div className="small">Favorite color</div>
                     <div style={{ display: "flex", gap: 8, alignItems: "center", marginTop: 8 }}>
                        <input type="color" name="color" value={values.color} onChange={handleChange} style={{ width: 48, height: 38, padding: 0, border: 0, background: "transparent", cursor: "pointer" }} />
                        <div style={{ fontWeight: 700 }}>{values.color.toUpperCase()}</div>
                        <div className="color-swatch" style={{ background: values.color }} />
                     </div>
                  </div>
               </div>

               <div style={{ display: "flex", gap: 12, alignItems: "center" }}>
                  <label style={{ display: "flex", gap: 8, alignItems: "center", cursor: "pointer" }}>
                     <input type="checkbox" name="terms" checked={values.terms} onChange={handleChange} />
                     <span className="small">I agree to the terms</span>
                  </label>
                  {errors.terms && <div className="error">{errors.terms}</div>}
               </div>

               <div className="submit-row">
                  <div style={{ display: "flex", gap: 8 }}>
                     <button type="submit" className="btn" disabled={submitting}>{submitting ? "Saving..." : "Save profile"}</button>
                     <button type="button" className="btn ghost" onClick={handleReset}>Reset</button>
                  </div>
                  <div className="footer-note">Tips: Click skills to toggle. Avatar preview updates instantly.</div>
               </div>
            </form>
         </div>

         <div className="card summary">
            <div style={{ display: "flex", justifyContent: "space-between", alignItems: "start", gap: 12 }}>
               <div>
                  <div className="small">Preview</div>
                  <div style={{ fontWeight: 800, fontSize: 18 }}>{values.name || "Your name"}</div>
                  <div className="small" style={{ marginTop: 6 }}>{values.role} â€¢ {values.experience} yrs</div>
               </div>
               <div style={{ width: 72, height: 72, borderRadius: 10, overflow: "hidden", background: values.color, display: "flex", alignItems: "center", justifyContent: "center", color: "#001" }}>
                  {preview ? <img src={preview} alt="avatar" style={{ width: "100%", height: "100%", objectFit: "cover" }} /> : <div style={{ fontWeight: 700 }}>{(values.name || "U").slice(0,1).toUpperCase()}</div>}
               </div>
            </div>

            <div style={{ marginTop: 12, display: "flex", gap: 8, flexWrap: "wrap" }}>
               <div className="badge">Email: {values.email || "â€”"}</div>
               <div className="badge">Skills: {skills.join(", ") || "â€”"}</div>
               <div className="badge">Color: {values.color.toUpperCase()}</div>
            </div>

            <div style={{ marginTop: 12 }} className="small">{values.bio ? values.bio : "Your bio will appear here."}</div>

            <div style={{ marginTop: 14, display: "flex", gap: 8 }}>
               <button className="btn" onClick={() => setSummaryOpen(true)}>Open summary</button>
               <button className="btn ghost" onClick={() => alert("This would export the profile in a real app.")}>Export</button>
            </div>
         </div>

         {summaryOpen && (
            <div className="modal" onClick={() => setSummaryOpen(false)}>
               <div className="dialog" onClick={e => e.stopPropagation()}>
                  <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
                     <div style={{ fontWeight: 800 }}>Profile summary</div>
                     <button className="btn ghost" onClick={() => setSummaryOpen(false)}>Close</button>
                  </div>
                  <div style={{ marginTop: 12 }}>
                     <div className="small">Name</div>
                     <div style={{ fontWeight: 700 }}>{values.name || "â€”"}</div>

                     <div style={{ marginTop: 8 }} className="small">Email</div>
                     <div>{values.email || "â€”"}</div>

                     <div style={{ marginTop: 8 }} className="small">Role</div>
                     <div>{values.role}</div>

                     <div style={{ marginTop: 8 }} className="small">Skills</div>
                     <div>{skills.join(", ") || "â€”"}</div>

                     <div style={{ marginTop: 8 }} className="small">Bio</div>
                     <div>{values.bio || "â€”"}</div>

                     <div style={{ marginTop: 8 }} className="small">Experience</div>
                     <div>{values.experience} years</div>

                     <div style={{ marginTop: 8 }} className="small">Favorite Color</div>
                     <div style={{ display: "flex", gap: 8, alignItems: "center" }}>
                        <div className="color-swatch" style={{ background: values.color }} />
                        <div>{values.color.toUpperCase()}</div>
                     </div>

                     <div style={{ marginTop: 12, display: "flex", gap: 8 }}>
                        <button className="btn" onClick={() => { setSummaryOpen(false); alert("Profile saved locally (mock)."); }}>Confirm</button>
                        <button className="btn ghost" onClick={() => setSummaryOpen(false)}>Cancel</button>
                     </div>
                  </div>
               </div>
            </div>
         )}
      </div>
   );
}